#%%
import numpy as np
import matplotlib.pyplot as plt
import os
import pandas as pd

dir1=r'C:\Users\ogamb\OneDrive\Desktop\Research\FSM_pyramidal'
os.chdir(dir1)

df = pd.read_csv("Table0.csv")
data=np.array(df)

names=df.columns

dnum=0 # 0 to 11, DE/NR F/M/S 10/40 (binary-like), +6 is the NR (5 max)
I=data[:, dnum][:12000]
vd=data[:, dnum+13][:12000]
#  0   1   2   3   4   5   6   7   8   9   10  11
c=[500,500,500,500,500,500,500,500,500,500,500,500]
#     0   1   2   3   4   5   6   7   8   9   10  11
tauv=[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]
vb=[-1.21, -1.2,-1.2,-1.2,-1.284,-1.284,
    -1.2,-1.2,-1.2,-1.2,-1.2,-1.2]

dt=1e-3

def getv():
    v=np.zeros(len(I))
    v[0]=vd[0]
    for i in range(1,len(I)):
        dvdt=(vb[dnum]-v[i-1])/(tauv[dnum])+c[dnum]*I[i-1]
        v[i]=v[i-1]+dvdt*dt
    return v

v=getv()
    
%matplotlib qt5
fig, ax = plt.subplots(3,1, figsize = (6,4))
ax[0].plot(I)
ax[0].set_ylabel('current')
ax[1].plot(vd)
ax[1].set_ylabel('membrane\npotential')
ax[1].plot(v, color='orange')
ax[2].plot(a)
fig.suptitle(names[dnum])

plt.show()

#%% a method

a0=0.1
taua=0.01
ca=500
dt=1e-3


def getva():
    v=np.zeros(len(I))
    a=np.zeros_like(v)
    a[0]=a0
    v[0]=vd[0]
    for i in range(1,len(I)):
        dvdt=(vb[dnum]-v[i-1])/(tauv[dnum]+a[i-1])+c[dnum]*I[i-1]
        v[i]=v[i-1]+dvdt*dt
        
        dadt = (a0-a[i-1])/taua-ca*I[i-1]
        a[i]=a[i-1]+dadt*dt
    return v,a

va,a=getva()

    
fig, ax = plt.subplots(3,1, figsize = (6,4))
ax[0].plot(I)
ax[0].set_ylabel('current')
ax[1].plot(vd, label='vd')
ax[1].set_ylabel('membrane\npotential')
ax[1].plot(va, color='orange', label='va')
ax[2].plot(a)
fig.suptitle(names[dnum])
ax[1].legend()

plt.show()
#%% a b method
a0=8
# taua=0.01
ca=5000

b0=1
taub=100
cb=50000

dt=1e-3
v=np.zeros(len(I))
a=np.zeros_like(v)
a[0]=a0

b=np.zeros_like(v)
b[0]=b0

v[0]=vd[0]
for i in range(1,len(I)):
    dvdt=(vb[dnum]-v[i-1])*(tauv[dnum]+a[i-1])+c[dnum]*I[i-1]
    v[i]=v[i-1]+dvdt*dt
    
    dadt = (a0-a[i-1])*b[i-1]-ca*I[i-1]
    a[i]=a[i-1]+dadt*dt
    
    dbdt = (b0-b[i-1])*taub+cb*I[i-1]
    b[i]=b[i-1]+dbdt*dt
    
# =============================================================================
# plt.plot(vd, label='data')
# plt.ylabel('membrane potential')
# plt.xlabel('time (ms)')
# plt.plot(v, color='orange', label='simulations')
# plt.title(names[dnum])
# plt.legend()
# plt.show()
# =============================================================================
    
# =============================================================================
# fig, ax = plt.subplots(2,1, figsize = (6,4))
# ax[0].plot(I)
# ax[0].set_ylabel('current')
# ax[1].plot(vd)
# ax[1].set_ylabel('membrane\npotential')
# ax[1].plot(v, color='orange')
# fig.suptitle(names[dnum])
# =============================================================================



fig, ax = plt.subplots(4,1, figsize = (6,4))
ax[0].plot(I)
ax[0].set_ylabel('current')
ax[1].plot(vd)
ax[1].set_ylabel('membrane\npotential')
ax[1].plot(v, color='orange')
ax[2].plot(a)
ax[3].plot(b)
fig.suptitle(names[dnum])

plt.show()

    
