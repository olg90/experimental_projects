import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import nbinom, binom
from scipy.special import comb, beta as beta_func
from scipy.optimize import minimize
import random

# =================== 1. Fit Negative Binomial ===================
def fit_negative_binomial(data):
    data = np.array(data)
    mean_pf = np.mean(data)
    var_pf = np.var(data)
    if var_pf <= mean_pf:
        var_pf = mean_pf + 1e-3
    p = mean_pf / var_pf
    r = mean_pf * p / (1 - p)
    return r, p

def sample_n_fields(r, p):
    return nbinom.rvs(r, p)

# =================== 2. Sample centroid locations ===================
def sample_centroids(matrix_shape, pf_shapes, n_fields, max_attempts=1000):
    H, W = matrix_shape
    centroids = []
    occupancy = np.zeros(matrix_shape)
    for _ in range(n_fields):
        placed = False
        attempts = 0
        while not placed and attempts < max_attempts:
            attempts += 1
            pf_shape = random.choice(pf_shapes)
            h_pf, w_pf = pf_shape
            if h_pf > H or w_pf > W:
                continue
            x = np.random.randint(0, H - h_pf + 1)
            y = np.random.randint(0, W - w_pf + 1)
            if np.sum(occupancy[x:x+h_pf, y:y+w_pf]) == 0:
                centroids.append((x, y, pf_shape))
                occupancy[x:x+h_pf, y:y+w_pf] = 1
                placed = True
    return centroids

# =================== 3. Place fields into matrix ===================
def generate_matrix(pfields, matrix_shape, n_fields):
    pf_shapes = [pf.shape for pf in pfields]
    centroids = sample_centroids(matrix_shape, pf_shapes, n_fields)
    new_matrix = np.zeros(matrix_shape)
    for x, y, shape in centroids:
        candidates = [pf for pf in pfields if pf.shape == shape]
        if not candidates:
            continue
        pf = random.choice(candidates)
        new_matrix[x:x+shape[0], y:y+shape[1]] += pf
    return new_matrix

# =================== 4. Generate multiple non-blank matrices and sum ===================
def generate_nonblank_matrices(pfields, nlist, matrix_shape, n_matrices=100):
    r, p = fit_negative_binomial(nlist)
    summed_matrix = np.zeros(matrix_shape)
    count = 0
    while count < n_matrices:
        n_fields_sampled = sample_n_fields(r, p)
        if n_fields_sampled == 0:
            continue
        mat = generate_matrix(pfields, matrix_shape, n_fields_sampled)
        summed_matrix += mat
        count += 1
    return summed_matrix

# =================== 5. Histogram helpers ===================
def hist_with_bins(data):
    max_val = int(np.max(data))
    bins = np.arange(-0.5, max_val+1.5, 1)
    hist, bins = np.histogram(data, bins=bins)
    bin_centers = (bins[:-1] + bins[1:])/2
    return hist, bin_centers

# =================== 6. Beta-Binomial PMF ===================
def beta_binomial_pmf(k, n, a, b):
    return comb(n, k) * beta_func(k+a, n-k+b) / beta_func(a, b)

# =================== 7. Fit Binomial Mixture ===================
def binomial_mixture_nll(params, data, n_max):
    f, p1, p2 = params
    pmf = f*binom.pmf(data, n_max, p1) + (1-f)*binom.pmf(data, n_max, p2)
    pmf = np.clip(pmf, 1e-10, None)
    return -np.sum(np.log(pmf))

def fit_binomial_mixture(data):
    n_max = int(max(data))
    x0 = [0.5, 0.2, 0.8]
    bounds = [(0,1), (0,1), (0,1)]
    res = minimize(binomial_mixture_nll, x0, args=(data, n_max), bounds=bounds)
    return res.x, res.fun, n_max

# =================== 8. Fit Beta-Binomial Mixture ===================
def beta_binomial_mixture_nll(params, data, n_max):
    f, a1, b1, a2, b2 = params
    pmf = f*beta_binomial_pmf(data, n_max, a1, b1) + (1-f)*beta_binomial_pmf(data, n_max, a2, b2)
    pmf = np.clip(pmf, 1e-10, None)
    return -np.sum(np.log(pmf))

def fit_beta_binomial_mixture(data):
    n_max = int(max(data))
    x0 = [0.5, 2, 5, 5, 2]
    bounds = [(0,1),(1e-2,None),(1e-2,None),(1e-2,None),(1e-2,None)]
    res = minimize(beta_binomial_mixture_nll, x0, args=(data,n_max), bounds=bounds)
    return res.x, res.fun, n_max

# =================== 9. Plot functions ===================
def plot_summed_matrix(matrix):
    plt.figure(figsize=(8,6))
    plt.imshow(matrix, cmap='viridis', origin='lower')
    plt.colorbar(label="Number of place fields")
    plt.title("Summed Place Fields Across Matrices")
    plt.xlabel("X Position")
    plt.ylabel("Y Position")
    plt.show()

def plot_histogram_neuron(nlist_data):
    hist, bin_centers = hist_with_bins(nlist_data)
    plt.figure(figsize=(8,5))
    plt.bar(bin_centers, hist, width=0.8, align='center', color='lightgreen', edgecolor='black', linewidth=1)
    plt.xlabel("Number of place fields per neuron")
    plt.ylabel("Number of neurons")
    plt.title("Histogram of Place Fields per Neuron")
    plt.xticks(bin_centers.astype(int))
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

def plot_histogram_pixel_with_distributions(summed_matrix):
    data = summed_matrix.flatten()
    hist, bin_centers = hist_with_bins(data)
    x_fit = np.arange(int(max(data))+1)

    # NB
    r, p = fit_negative_binomial(data)
    nb_pmf = nbinom.pmf(x_fit, r, p)*len(data)
    nb_mean = r*(1-p)/p
    nb_std = np.sqrt(r*(1-p)/(p**2))
    nb_cv2 = (nb_std/nb_mean)**2
    nb_aic = 2*2 - 2*np.sum(nbinom.logpmf(data, r, p))

    # Binomial Mixture
    bm_params, bm_nll, n_max = fit_binomial_mixture(data)
    f_bm, p1_bm, p2_bm = bm_params
    bm_pmf = (f_bm*binom.pmf(x_fit, n_max, p1_bm) + (1-f_bm)*binom.pmf(x_fit, n_max, p2_bm))*len(data)
    bm_mean = f_bm*n_max*p1_bm + (1-f_bm)*n_max*p2_bm
    bm_var = f_bm*n_max*p1_bm*(1-p1_bm) + (1-f_bm)*n_max*p2_bm*(1-p2_bm) + f_bm*(1-f_bm)*(n_max*(p1_bm-p2_bm))**2
    bm_cv2 = bm_var/bm_mean**2
    bm_aic = 2*3 - 2*(-bm_nll)

    # Beta-Binomial Mixture
    bb_params, bb_nll, n_max = fit_beta_binomial_mixture(data)
    f_bb, a1_bb, b1_bb, a2_bb, b2_bb = bb_params
    pmf1 = beta_binomial_pmf(x_fit, n_max, a1_bb, b1_bb)
    pmf2 = beta_binomial_pmf(x_fit, n_max, a2_bb, b2_bb)
    bb_pmf = (f_bb*pmf1 + (1-f_bb)*pmf2)*len(data)
    bb_mean = f_bb*a1_bb/(a1_bb+b1_bb)*n_max + (1-f_bb)*a2_bb/(a2_bb+b2_bb)*n_max
    var1 = n_max*a1_bb*b1_bb/((a1_bb+b1_bb)**2*(a1_bb+b1_bb+1))
    var2 = n_max*a2_bb*b2_bb/((a2_bb+b2_bb)**2*(a2_bb+b2_bb+1))
    bb_var = f_bb*var1 + (1-f_bb)*var2
    bb_cv2 = bb_var/bb_mean**2
    bb_aic = 2*5 - 2*(-bb_nll)

    plt.figure(figsize=(9,6))
    plt.bar(bin_centers, hist, width=0.8, align='center', color='lightblue', edgecolor='black', linewidth=1, label='Data')
    plt.plot(x_fit, nb_pmf, 'r-o', label=f'NB: mean={nb_mean:.2f}, CV²={nb_cv2:.2f}, AIC={nb_aic:.1f}')
    plt.plot(x_fit, bm_pmf, 'g-s', label=f'Binom Mix: f={f_bm:.2f}, p1={p1_bm:.2f}, p2={p2_bm:.2f}, mean={bm_mean:.2f}, CV²={bm_cv2:.2f}, AIC={bm_aic:.1f}')
    plt.plot(x_fit, bb_pmf, 'm-^', label=f'Beta-Bin Mix: f={f_bb:.2f}, a1={a1_bb:.2f}, b1={b1_bb:.2f}, a2={a2_bb:.2f}, b2={b2_bb:.2f}, mean={bb_mean:.2f}, CV²={bb_cv2:.2f}, AIC={bb_aic:.1f}')
    plt.xlabel("Number of place fields per pixel")
    plt.ylabel("Number of pixels")
    plt.title("Histogram of Place Fields per Pixel with Distributions")
    plt.xticks(bin_centers.astype(int))
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.legend(fontsize=8)
    plt.show()

def plot_sample_generated_neuron(pfields, matrix_shape, nlist):
    r, p = fit_negative_binomial(nlist)
    n_fields_sampled = sample_n_fields(r, p)
    if n_fields_sampled==0: n_fields_sampled=1
    sample_matrix = generate_matrix(pfields, matrix_shape, n_fields_sampled)
    plt.figure(figsize=(6,5))
    plt.imshow(sample_matrix, cmap='hot', origin='lower')
    plt.colorbar(label="Firing rate (generated)")
    plt.title(f"Sample Generated Neuron Place Map ({n_fields_sampled} fields)")
    plt.xlabel("X Position")
    plt.ylabel("Y Position")
    plt.show()

# =================== 10. Example Usage ===================
dnum = 0
pfields = p1[dnum]       # list of place field arrays
nlist_data = nlist[dnum] # number of place fields per neuron
matrix_shape = min([pf.shape for pf in pfields], key=lambda x: x[0]*x[1])
n_matrices = 150

summed_matrix = generate_nonblank_matrices(pfields, nlist_data, matrix_shape, n_matrices=n_matrices)

# --- Plots ---
plot_summed_matrix(summed_matrix)
plot_histogram_neuron(nlist_data)
plot_histogram_pixel_with_distributions(summed_matrix)
plot_sample_generated_neuron(pfields, matrix_shape, nlist_data)
