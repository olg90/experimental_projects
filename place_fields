#%% Imports
import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import label
from scipy.spatial.distance import cdist
from scipy.stats import gamma, lognorm, weibull_min, expon

#%% Functions to compute min distances between neurons with progress
def min_dist_centroids_between_neurons(p1):
    min_distances = []

    for dataset_idx, dataset in enumerate(p1):
        neuron_centroids = []
        neuron_field_counts = []

        for neuron_map in dataset:
            structure = np.ones((3,3))
            labeled, n_fields = label(neuron_map, structure=structure)
            neuron_field_counts.append(n_fields)
            centroids = []
            for i in range(1, n_fields + 1):
                coords = np.column_stack(np.nonzero(labeled == i))
                cy, cx = coords.mean(axis=0)
                centroids.append((cy, cx))
            neuron_centroids.append(np.array(centroids))

        total_neurons = len(neuron_centroids)
        for i, centroids_i in enumerate(neuron_centroids):
            if neuron_field_counts[i] == 0:
                continue
            # All centroids from other neurons
            other_centroids = np.vstack([neuron_centroids[j] for j in range(len(neuron_centroids)) if j != i and neuron_field_counts[j] > 0])
            if other_centroids.size == 0:
                continue
            dists = cdist(centroids_i, other_centroids)
            min_distances.extend(dists.min(axis=1))

            # Progress
            pct = (i + 1) / total_neurons * 100
            print(f"\rDataset {dataset_idx+1}/{len(p1)} - {pct:.1f}% complete", end='')

    print()
    return np.array(min_distances)


def min_dist_closest_points_between_neurons(p1):
    min_distances = []

    for dataset_idx, dataset in enumerate(p1):
        neuron_fields = []
        neuron_field_counts = []

        for neuron_map in dataset:
            structure = np.ones((3,3))
            labeled, n_fields = label(neuron_map, structure=structure)
            neuron_field_counts.append(n_fields)
            fields = [np.column_stack(np.nonzero(labeled == i)) for i in range(1, n_fields + 1)]
            neuron_fields.append(fields)

        total_neurons = len(neuron_fields)
        for i, fields_i in enumerate(neuron_fields):
            if neuron_field_counts[i] == 0:
                continue
            # All fields from other neurons
            other_fields = [pt for j, flds in enumerate(neuron_fields) if j != i for pt in flds]
            if len(other_fields) == 0:
                continue
            for fld in fields_i:
                dists = [cdist(fld, other_fld).min() for other_fld in other_fields]
                min_distances.append(min(dists))

            # Progress
            pct = (i + 1) / total_neurons * 100
            print(f"\rDataset {dataset_idx+1}/{len(p1)} - {pct:.1f}% complete", end='')

    print()
    return np.array(min_distances)

#%% Fit distributions and compute AIC
def fit_distributions(data):
    fits = {}
    dist_list = {'Gamma': gamma, 'Lognormal': lognorm, 'Weibull': weibull_min, 'Exponential': expon}
    n = len(data)

    for name, dist in dist_list.items():
        params = dist.fit(data, floc=0)
        loglik = np.sum(dist.logpdf(data, *params))
        k = len(params)  # number of parameters
        aic = 2*k - 2*loglik
        fits[name] = {'params': params, 'aic': aic, 'dist': dist}
    return fits

#%% Plot histogram with fitted distributions and AIC (counts)
def plot_histogram_with_fits_counts(data, title):
    plt.figure(figsize=(7,5))
    counts, bins, _ = plt.hist(data, bins=50, color='lightblue', edgecolor='black', alpha=0.8, label='Data')
    bin_width = bins[1] - bins[0]
    x = np.linspace(min(data), max(data), 400)
    mean_data = np.mean(data)
    cv2_data = np.var(data) / mean_data**2

    fits = fit_distributions(data)
    for name, info in fits.items():
        pdf = info['dist'].pdf(x, *info['params'])
        pdf_scaled = pdf * len(data) * bin_width  # scale PDF to counts
        plt.plot(x, pdf_scaled, lw=2, label=f'{name} (mean={mean_data:.2f}, CVÂ²={cv2_data:.2f}, AIC={info["aic"]:.1f})')

    plt.xlabel("Minimum Distance (pixels)")
    plt.ylabel("Count")
    plt.title(title)
    plt.grid(alpha=0.3, linestyle='--')
    plt.legend(fontsize=9)
    plt.tight_layout()
    plt.xlim([0, 60])
    plt.show()

#%% Compute distances
print("Computing centroid-based distances between neurons...")
min_dists_cent = min_dist_centroids_between_neurons(p1)

print("Computing closest-point distances between neurons...")
min_dists_closest = min_dist_closest_points_between_neurons(p1)

#%% Plot separately
plot_histogram_with_fits_counts(min_dists_cent, "Smallest distance between placefield centroids (between neurons)")
plot_histogram_with_fits_counts(min_dists_closest, "Smallest distance between the closest points of place fields (between neurons)")
