# Spike threshold adaptation paper simulations
import numpy as np
import matplotlib.pyplot as plt

def thetainf(vm, vi, vt, at):
    if vm < vi:
        return vt
    if vm >= vi:
        return at*(vm-vi)+vt
    
def getiext(f, y0, tauy, taui, ki, tmax, delta_t):
        tlist=[]
        ylist=[]
        Iextlist=[]
        Iext=0
        y=0
        tcurr=0
        timer = delta_t
        e=1e-6
        while tcurr < tmax:
            t0=np.random.exponential(1/(f+e)) # action potential
            t1 = timer
            if t0 < t1:
                y += y0
                tmin=t0
                timer-=tmin
            else:
                Iextlist.append(Iext)
                ylist.append(y)
                tlist.append(tcurr)
                timer=delta_t
                tmin=timer
            tcurr += tmin
            # Update the continuous dynamics
            Iext += (-Iext/taui + ki*y)*tmin
            y += (-y/tauy)*tmin
        return np.array(tlist), np.array(ylist), np.array(Iextlist)
    
def getiext2(f, M, pr, c, taui, tmax, delta_t):
        tlist=[]
        Iextlist=[]
        Iext=0
        tcurr=0
        timer = delta_t
        e=1e-6
        while tcurr < tmax:
            t0=np.random.exponential(1/(f+e)) # action potential
            t1 = timer
            if t0 < t1:
                b=np.random.binomial(M, pr)
                Iext+=c*b
                tmin=t0
                timer-=tmin
            else:
                Iextlist.append(Iext)
                tlist.append(tcurr)
                timer=delta_t
                tmin=timer
            tcurr += tmin
            # Update the continuous dynamics
            Iext += (-Iext/taui)*tmin
        return np.array(tlist), np.array(Iextlist)

f=20
E1=-70e-3
rm=1
taum=1

tautheta1=37e-3
tautheta2=3.7e-3
vr=-62e-3
vi=-40e-3
vt=-31e-3
at=0.8
alpha=5e-3
    
y0=0.2 # current
tauy=0.1
taui=0.1
ki=1.5

M=100 # presynaptic current
pr=0.2
taui=0.1
c=0.0015

tmax=20 # timings
dt=0.001 


# tlist, ylist, iext = getiext(f, y0, tauy, taui, ki, tmax, dt)
tlist, iext = getiext2(f, M, pr, c, taui, tmax, dt)
vm=np.zeros(len(tlist))
theta1=np.zeros_like(vm)
theta2=np.zeros_like(vm)
theta=np.zeros_like(vm)

vm[0]=vr
theta[0]=vt
theta1[0]=vt
theta2[0]=0

for i in range(1, len(iext)):
    
    dvmdt = 1/taum*(E1-vm[i-1]+rm*iext[i-1])
    vm[i] = vm[i-1]+dvmdt*dt
    
    dtheta1dt = 1/tautheta1*(-theta1[i-1] + thetainf(vm[i-1], vi, vt, at))
    theta1[i] = theta1[i-1] + dtheta1dt*dt
    
    dtheta2dt=1/tautheta2*(-theta2[i-1])
    theta2[i]=theta2[i-1]+dtheta2dt*dt
    
    theta[i] = theta1[i]+theta2[i]
    
    if vm[i]>theta[i]:
        theta2[i]+=alpha
        vm[i]=vr
    
plt.subplot(2,1,1)
plt.plot(tlist, iext)
plt.xticks([])
plt.ylabel('Current')
plt.subplot(2,1,2)
plt.plot(tlist, vt*np.ones(len(tlist)), label='vt', color='gray', linestyle='--')
plt.plot(tlist, vi*np.ones(len(tlist)), label='vi', color='gray', linestyle=':')
plt.plot(tlist, theta, color='k', label='vth')
plt.plot(tlist, vm, label='vm')
plt.legend(loc='upper right')
plt.xlabel('Time (sec)')
plt.ylabel('Voltage')
plt.show()

