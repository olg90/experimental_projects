#%% Define the functions for fitting
import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp
from numpy import sqrt as Sqrt
from numpy import log as Log
import pandas as pd

def simulate(n, ni, v, w, w0, vth, c, ci, f, fi, pr, pri, M, Mi, k, ki, kw, vb, tauv, tauvth, tmax, delta_t, navgs):
    
    tavgs=[]
    cavgs=[]
    
    for _ in range(navgs):
    
        nlist=[]
        vthlist=[]
        vlist=[]
        wlist=[]
        tlist=[]
        prelist=[]
        postlist=[]
        postvth=[]
        
        tcurr=0
        ratio = 0.3
        timer = delta_t
        e=1e-6
        wTrue=True
        while tcurr < tmax:
            t0=exponential(1/f+e) # action potential
            t1=exponential(1/(k*(M-n)+e)) # site gets occupied
            t2=exponential(1/(fi+e))
            t3=exponential(1/(ki*(Mi-ni)+e))
            t4 = timer

            if t0 < t1 and t0 < t2 and t0<t3 and t0<t4: # AP occurrs
                b = binomial(n, pr)
                n-=b
                v=v+c*b
                tmin = t0
                timer-=tmin
                prelist.append(tcurr+tmin)
                
            elif t1<t0 and t1<t2 and t1<t3 and t1<t4: # docking site refills
                n+=1
                tmin = t1
                timer-=tmin
                
            elif t2<t0 and t2<t1 and t2<t3 and t2<t4: # docking site refills
                ni+=1
                tmin = t2
                timer-=tmin
    
            elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # an inhibition event occurs
            
                bi = binomial(ni, pri)
                ni-=bi
                v=v-ci*bi
                tmin = t3
                timer-=tmin
    
            else:
                tmin=t3
                timer = delta_t
                if tcurr >= ratio*tmax:
                    nlist.append(n)
                    vlist.append(v)
                    vthlist.append(vth)
                    wlist.append(w)
                    tlist.append(tcurr)
                    
            tcurr += tmin
            if v>=vth:
                postlist.append(tcurr)
                postvth.append(vth)
                v=0
                
            if v<0 and wTrue==True:
                w=w0 # w = w0
                wTrue=False
                
            if v>0:
                wTrue=True

                
            # Update the continuous dynamics
    
            v += (-v / tauv) * tmin
            vth += ((vb-vth) / tauvth - kw * w) * tmin
            w += (-w/tauw)*tmin
            
    
        Tlist = np.diff(postlist)
        Tmean = np.mean(Tlist)
        CVT2=np.var(Tlist)/Tmean**2
        FFn=np.var(nlist)/np.mean(nlist)
        FFv=np.var(vlist)/np.mean(vlist)
        
        tavgs.append(Tmean)
        cavgs.append(CVT2)
    Tmean = np.mean(tavgs)
    CVT2 = np.mean(cavgs)
    return tlist, nlist, vlist, wlist, vthlist, prelist, postlist, Tmean, CVT2, FFn, FFv, postvth

# Load the entire Excel file
file_path = r"C:\Users\ogamb\OneDrive\Desktop\Research\current_project\postinhibitory_facilitation\allcellscopy.xlsx"  # Change this to your actual path

# Read all data into a dictionary
data = pd.read_excel(file_path, sheet_name=None, header=None)

# # Print all sheet names
# print("data found:", list(data.keys()))

# # Loop through data and preview first few rows
# for sheet_name, df in data.items():
#     print(f"\n--- Sheet: {sheet_name} ---")
#     print(df.head())

names = ['Summary', '240425_E4', '240425_E5', '240425_E6', 
         '240426_E2', '240426_E3', '240426_E5', '240515_E2', 
         '240516_E2', '240516_E7']

d=data[names[0]]
# rates = d.iloc[:, 0][:8]
filist=[0,50,100,150,200,250,300]
excnum=2 # #0=exc weight 10, #1=exc weight 4, #2=exc weight 1
d1=d.iloc[1:, -3:][7*excnum:7*(excnum+1)] # Mean sustained rate
# susrates=[d.iloc[1:, -3:][7*i:7*(i+1)] for i in range(3)]
# plt.plot(rates, d1.iloc[:,2], marker='o') # 0 = 8 nS/input, 1 = 4 nS/input, 2 = 2 nS/input 

# 0 = 8 nS/input, 1 = 4 nS/input, 2 = 2 nS/input 
estrengths=[10,4,1]
istrengths=[8,4,2]
# =============================================================================
# for i in range(3):
#     plt.plot(filist, d1.iloc[:,i], marker='o', label='exc={}, inh={}'.format(estrengths[excnum], istrengths[i]))
# plt.legend()
# plt.show()
# #%%
# =============================================================================

f=20
pr=0.3
pri=0.3
M=100
Mi=100
k=10
ki=10
c=0.005
ci=0.01

tauv=0.1
tauvth=0.1

w0=1 # initial jump value for synthetic w variable which decreases vth
tauw=0.15 # rate of decay of w, low means quicker
kw=1.75 # conversion from w to vth, higer decrease vth more quickly

vb=0.2 # Base threshold value
vth=vb # Threshold initial value

n=0 # occupied states
ni=0
v=0
w=0

delta_t = 0.001
tmax = 10 # <-------------- TMAX
navgs = 10

# check = tauvth + fi*tauvth*tauw>tauw
# print(check)

# =============================================================================
# fi=50
# tmax=5
# res=simulate(n, ni, v, w, w0, vth, c, ci, f, fi, pr, pri, M, Mi, k, ki, kw, vb, tauv, tauvth, tmax, delta_t, navgs)
# plt.subplot(2,1,1)
# plt.plot(res[0], res[2], label=r'$v_m$')
# plt.plot(res[0], res[4], color='k', label=r'$v_{{th}}$')
# plt.plot(res[0], np.zeros(len(res[0])), linestyle='--', color='gray', label=r'$V_{{rest}}$')
# plt.legend()
# plt.subplot(2,1,2)
# plt.plot(res[0], res[3])
# plt.show()
# #%% Fit
# =============================================================================

ftlist=[]
for i,fi in enumerate(filist):
    print(i, len(filist))
    res=simulate(n, ni, v, w, w0, vth, c, ci, f, fi, pr, pri, M, Mi, k, ki, kw, vb, tauv, tauvth, tmax, delta_t, navgs)
    ftlist.append(res[7])

tsim=np.array(ftlist)
res=simulate(n, ni, v, w, w0, vth, c, ci, f, fi, pr, pri, M, Mi, k, ki, kw, vb, tauv, tauvth, tmax, delta_t, navgs)

# plt.subplot(2,1,2)
for i in range(3):
    plt.plot(filist, d1.iloc[:,i], marker='o', label='exc={}, inh={}'.format(estrengths[excnum], istrengths[i]))
fs=15
plt.plot(filist, 1/tsim, label='simulations', color='k', marker='o')
plt.ylabel('Steady state mean firing rate', fontsize=fs)
plt.xlabel('Inhibitory neuron frequency', fontsize=fs)
plt.legend(fontsize=fs-3)
plt.show()

